#!/bin/sh

# parse options

font=$1

shift

if [ "x$font" = "x" ]
then
  echo "No font specified!\n";
  echo "USAGE: maketfm <font> [options]";
  echo "\nSupported options are:";
  echo "--greek      | --nogreek"
  echo "--cyrillic   | --nocyrillic"
  echo "--vietnamese | --novietnamese"
  echo "--integrals  | --nointegrals"
  echo "--swash      | --noswash"
  echo "--expanded   | --noexpanded"
  exit 1
fi

create_greek=true
create_cyrillic=true
create_vietnamese=true
create_integrals=true
create_swash=true
create_expanded=false

for opt in $*
do
  case $opt in
    --greek)        create_greek=true;;
    --nogreek)      create_greek=false;;
    --cyrillic)     create_cyrillic=true;;
    --nocyrillic)   create_cyrillic=false;;
    --vietnamese)   create_vietnamese=true;;
    --novietnamese) create_vietnamese=false;;
    --integrals)    create_integrals=true;;
    --nointegrals)  create_integrals=false;;
    --swash)        create_swash=true;;
    --noswash)      create_swash=false;;
    --expanded)     create_expaned=true;;
    --noexpanded)   create_expaned=false;;
  esac
done

## Detect whether the full set of optical sizes is present.
#opticals=true
#
#if [ ! -e "otf/$font-Capt.otf" ]
#then
#  opticals=false
#fi

# Determine version of the fonts.

case $(strings $font-Regular.pfb | grep "^/version") in
  *\(001.000\)*) version=1;;
  *\(001.001\)*) version=2;;
  *\(002.000\)*) version=3;;
  *)             version=4;;
esac

# Newer versions have different glyph names.

digamma_flags=""
ornaments_flags=""

if [ $version -ge 3 ]
then
  digamma_flags="--unicoding 'uniEFD5 =: uni03DD'"
  ornaments_flags="--unicoding 'orn.014 =: uni2767' --unicoding 'orn.015 =: uni2766' --unicoding 'orn.029 =: uni27A2' --unicoding 'orn.035 =: uni2733' --unicoding 'orn.037 =: uni2734' --unicoding 'orn.038 =: uni2713'"
else
  create_vietnamese=false
fi


make_tfm() {

  name="$1"
  enc="$2"
  spec="$3"
  shift 3

  common_flags="--tfm-directory=./tfm --vf-directory=./vf --encoding-directory=./dvips --no-type1 --no-updmap --no-dotlessj -fkern"

  echo -n 'echo -n " '"$spec"'," >&2; ' >>maketfm.tmp
  echo "otftotfm           $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'"    >>maketfm.tmp

  # expanded metrics for pdftex's font expansion

  if $create_expaned
  then
    echo -n 'echo -n " '"$spec"'," >&2; ' >>maketfm-expanded.tmp
    echo "otftotfm -E1.020 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'+20" >>maketfm-expanded.tmp
    echo "otftotfm -E1.016 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'+16" >>maketfm-expanded.tmp
    echo "otftotfm -E1.012 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'+12" >>maketfm-expanded.tmp
    echo "otftotfm -E1.008 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'+8"  >>maketfm-expanded.tmp
    echo "otftotfm -E1.004 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'+4"  >>maketfm-expanded.tmp
    echo "otftotfm -E0.996 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'-4"  >>maketfm-expanded.tmp
    echo "otftotfm -E0.992 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'-8"  >>maketfm-expanded.tmp
    echo "otftotfm -E0.988 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'-12" >>maketfm-expanded.tmp
    echo "otftotfm -E0.984 $common_flags $@ -e 'enc/mn-$enc.enc' 'otf/$font-$name.otf' '$font-$name-$spec'-16" >>maketfm-expanded.tmp
    echo "otftotfm -E0.980 $common_flags $@ -e 'enc/mn-$enc.enc' "otf/$font-$name.otf" "$font-$name-$spec"-20" >>maketfm-expanded.tmp
  fi
}

get_flags() {
  case $1 in
      lf) flags="-flnum -fpnum";;
     osf) flags="-fonum -fpnum";;
     tlf) flags="-flnum -ftnum";;
    tosf) flags="-fonum -ftnum";;
  esac
}
get_ts_flags() {
  case $1 in
      lf) ts_flags="-fpnum --subs-filter='<Number>' -fonum --subs-filter='!<Number>' -flnum";;
     osf) ts_flags="-fpnum --subs-filter='<Number>' -flnum --subs-filter='!<Number>' -fonum";;
     tlf) ts_flags="-ftnum --subs-filter='<Number>' -fonum --subs-filter='!<Number>' -flnum";;
    tosf) ts_flags="-ftnum --subs-filter='<Number>' -flnum --subs-filter='!<Number>' -fonum";;
  esac
}
get_sc_flags() {
  case $1 in
      lf) sc_flags="--unicoding='ff =: emptyslot' --unicoding='fi =: emptyslot' --unicoding='fl =: emptyslot' --unicoding='ffi =: emptyslot' --unicoding='ffl =: emptyslot' -flnum -fpnum --subs-filter='<Letter>' -fsmcp";;
     osf) sc_flags="--unicoding='ff =: emptyslot' --unicoding='fi =: emptyslot' --unicoding='fl =: emptyslot' --unicoding='ffi =: emptyslot' --unicoding='ffl =: emptyslot' -fonum -fpnum -fsmcp";;
     tlf) sc_flags="--unicoding='ff =: emptyslot' --unicoding='fi =: emptyslot' --unicoding='fl =: emptyslot' --unicoding='ffi =: emptyslot' --unicoding='ffl =: emptyslot' -flnum -ftnum --subs-filter='<Letter>' -fsmcp";;
    tosf) sc_flags="--unicoding='ff =: emptyslot' --unicoding='fi =: emptyslot' --unicoding='fl =: emptyslot' --unicoding='ffi =: emptyslot' --unicoding='ffl =: emptyslot' -fonum -ftnum -fsmcp";;
  esac
}
get_sc_ts_flags() {
  case $1 in
      lf) sc_ts_flags="--unicoding='dotlessj =: Jsmall' -fpnum --subs-filter='<Number>' -fonum --subs-filter='!<Number>' -flnum --subs-filter='<Letter>' -fsmcp";;
     osf) sc_ts_flags="--unicoding='dotlessj =: Jsmall' -fpnum -fsmcp --subs-filter='<Number>' -flnum --subs-filter=!'<Number>' -fonum";;
     tlf) sc_ts_flags="--unicoding='dotlessj =: Jsmall' -ftnum --subs-filter='<Number>' -fonum --subs-filter='!<Number>' -flnum --subs-filter='<Letter>' -fsmcp";;
    tosf) sc_ts_flags="--unicoding='dotlessj =: Jsmall' -ftnum -fsmcp --subs-filter='<Number>' -flnum --subs-filter='!<Number>' -fonum";;
  esac
}
get_it_ot1_flags() {
  case "$1" in
    *It*) it_ot1_flags="--unicoding 'dollar =: sterling'";;
    *)    it_ot1_flags="";;
  esac
}
get_it_lgr_flags() {
  case "$1" in
    *It*) it_lgr_flags="--unicoding 'kappa =: kappasymbolgreek kappa' --unicoding 'theta =: theta1 theta'";;
    *)    it_lgr_flags="";;
  esac
}


make_normal_metrics() {

  get_flags       $2
  get_ts_flags    $2
  get_sc_flags    $2
  get_sc_ts_flags $2

  get_it_ot1_flags "$1"
  get_it_lgr_flags "$1"

  make_tfm "$1" t1     $2-t1        "-fliga $flags"
  make_tfm "$1" ot1    $2-ot1       "-fliga $it_ot1_flags $flags"
  make_tfm "$1" ly1    $2-ly1       "-fliga $flags"

  if $create_greek
  then
    echo 'cp enc/mn-lgr.enc enc/mn-lgrkern.enc' >>maketfm.tmp
    case "$1" in
      *BoldIt*)     if [ -e enc/lgr-bi.kern ];then echo 'cat enc/lgr-bi.kern >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *SemiboldIt*) if [ -e enc/lgr-si.kern ];then echo 'cat enc/lgr-si.kern >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *MediumIt*)   if [ -e enc/lgr-mi.kern ];then echo 'cat enc/lgr-mi.kern >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *It*)         if [ -e enc/lgr-ri.kern ];then echo 'cat enc/lgr-ri.kern >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *Bold*)       if [ -e enc/lgr-b.kern ];then echo 'cat enc/lgr-b.kern  >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *Semibold*)   if [ -e enc/lgr-s.kern ];then echo 'cat enc/lgr-s.kern  >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *Medium*)     if [ -e enc/lgr-m.kern ];then echo 'cat enc/lgr-m.kern  >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
      *)            if [ -e enc/lgr-r.kern ];then echo 'cat enc/lgr-r.kpx   >>enc/mn-lgrkern.enc' >>maketfm.tmp;fi;;
    esac
    make_tfm "$1" lgrkern $2-lgr    "-sgrek $it_lgr_flags $digamma_flags $flags"
  fi
  if $create_cyrillic
  then
    make_tfm "$1" t2a  $2-t2a       "-scyrl $flags"
    make_tfm "$1" t2b  $2-t2b       "-scyrl $flags"
    make_tfm "$1" t2c  $2-t2c       "-scyrl $flags"
    make_tfm "$1" x2   $2-x2        "-scyrl $flags"
    make_tfm "$1" ot2  $2-ot2       "-scyrl $flags"
  fi
  if $create_vietnamese
  then
    make_tfm "$1" t5   $2-t5        "       $flags"
    make_tfm "$1" t5   $2-sc-t5     "       $sc_flags"
    make_tfm "$1" t5   $2-sc-l2-t5  "-L 80  $sc_flags"
  fi

  make_tfm "$1" ts1    $2-ts1       "       $ts_flags"
  make_tfm "$1" ts1    $2-sc-ts1    "       $sc_ts_flags"
  make_tfm "$1" ts1    $2-sc-l2-ts1 "-L 80  $sc_ts_flags"

  make_tfm "$1" t1     $2-sc-t1     "       $sc_flags               --unicoding='germandbls =: SSsmall'"
  make_tfm "$1" ot1    $2-sc-ot1    "       $sc_flags $it_ot1_flags --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
  make_tfm "$1" ly1    $2-sc-ly1    "       $sc_flags               --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
  make_tfm "$1" t1     $2-sc-l2-t1  "-L 80  $sc_flags               --unicoding='germandbls =: SSsmall'"
  make_tfm "$1" ot1    $2-sc-l2-ot1 "-L 80  $sc_flags $it_ot1_flags --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
  make_tfm "$1" ly1    $2-sc-l2-ly1 "-L 80  $sc_flags               --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
}

make_oml_metrics() {

  make_tfm "$1" oml $2-l1-oml "--math-spacing --skew-char=255 -L 40 $3 $digamma_flags"
}

make_spread_metrics() {

  get_flags       $2
  get_ts_flags    $2
  get_sc_flags    $2
  get_sc_ts_flags $2

  get_it_ot1_flags "$1"
  get_it_lgr_flags "$1"

  make_tfm "$1" t1     $2-l1-t1     "-L 40        $flags"
  make_tfm "$1" ot1    $2-l1-ot1    "-L 40        $it_ot1_flags $flags"
  make_tfm "$1" ly1    $2-l1-ly1    "-L 40        $flags"

  if $create_greek
  then
    make_tfm "$1" lgrkern $2-l1-lgr "-L 40 -sgrek $it_lgr_flags $digamma_flags $flags"
  fi
  if $create_cyrillic
  then
    make_tfm "$1" t2a  $2-l1-t2a    "-L 40 -scyrl $flags"
    make_tfm "$1" t2b  $2-l1-t2b    "-L 40 -scyrl $flags"
    make_tfm "$1" t2c  $2-l1-t2c    "-L 40 -scyrl $flags"
    make_tfm "$1" x2   $2-l1-x2     "-L 40 -scyrl $flags"
    make_tfm "$1" ot2  $2-l1-ot2    "-L 40 -scyrl $flags"
  fi
  if $create_vietnamese
  then
    make_tfm "$1" t5   $2-sc-l1-t5  "-L 40        $sc_flags"
  fi

  make_tfm "$1" ts1    $2-l1-ts1    "-L 40        $ts_flags"
  make_tfm "$1" ts1    $2-sc-l1-ts1 "-L 40        $sc_ts_flags"
  make_tfm "$1" t1     $2-sc-l1-t1  "-L 40        $sc_flags               --unicoding='germandbls =: SSsmall'"
  make_tfm "$1" ot1    $2-sc-ot1    "-L 40        $sc_flags $it_ot1_flags --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
  make_tfm "$1" ly1    $2-sc-l1-ly1 "-L 40        $sc_flags               --unicoding='germandbls =: SSsmall' --unicoding='dotlessj =: Jsmall'"
}

make_integrals() {

  if [ -e "$font-$1.pfb" ]
  then
    if $create_integrals
    then
      echo 'echo -n "Processing font '"$font-$1"' ..." >&2' >>maketfm.tmp

      make_tfm "$1" integral integral
      make_tfm "$1" integral integral-cn2 "-E 0.75 -S 0.04"
      make_tfm "$1" integral integral-cn1 "-E 0.85"

      echo 'echo " done." >&2' >>maketfm.tmp
    fi
  fi
}

make_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo 'echo -n "Processing font '"$font-$1"' ..." >&2' >>maketfm.tmp

    make_normal_metrics "$1" lf
    make_normal_metrics "$1" tlf
    make_normal_metrics "$1" osf
    make_normal_metrics "$1" tosf

    make_oml_metrics    "$1" lf   "-flnum -ftnum"
    make_oml_metrics    "$1" tlf  "-flnum -fpnum"
    make_oml_metrics    "$1" osf  "-fonum -ftnum"
    make_oml_metrics    "$1" tosf "-fonum -fpnum"

    make_tfm     "$1" orn-u orn-u "$ornaments_flags"

    echo 'echo " done." >&2' >>maketfm.tmp
  fi
}

make_spaced_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo 'echo -n "Processing font '"$font-$1"' ..." >&2' >>maketfm.tmp

    make_spread_metrics     "$1" lf
    make_spread_metrics     "$1" tlf
    make_spread_metrics     "$1" osf
    make_spread_metrics     "$1" tosf

    echo 'echo " done." >&2' >>maketfm.tmp
  fi
}

make_swash_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo 'echo -n "Processing font '"$font-$1"' ..." >&2' >>maketfm.tmp

    get_it_ot1_flags "$1"

    make_tfm "$1" swash-t1  lf-swash-t1    "-fliga -flnum -fpnum"
    make_tfm "$1" swash-t1  osf-swash-t1   "-fliga -fonum -fpnum"
    make_tfm "$1" swash-t1  tlf-swash-t1   "-fliga -flnum -ftnum"
    make_tfm "$1" swash-t1  tosf-swash-t1  "-fliga -fonum -ftnum"
    make_tfm "$1" swash-ot1 lf-swash-ot1   "-fliga -flnum -fpnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 osf-swash-ot1  "-fliga -fonum -fpnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 tlf-swash-ot1  "-fliga -flnum -ftnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 tosf-swash-ot1 "-fliga -fonum -ftnum $it_ot1_flags"

    echo 'echo " done." >&2' >>maketfm.tmp
  fi
}

make_spaced_swash_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo 'echo -n "Processing font '"$font-$1"' ..." >&2' >>maketfm.tmp

    get_it_ot1_flags "$1"

    make_tfm "$1" swash-t1  lf-swash-l1-t1    "-L 40 -flnum -fpnum"
    make_tfm "$1" swash-t1  osf-swash-l1-t1   "-L 40 -fonum -fpnum"
    make_tfm "$1" swash-t1  tlf-swash-l1-t1   "-L 40 -flnum -ftnum"
    make_tfm "$1" swash-t1  tosf-swash-l1-t1  "-L 40 -fonum -ftnum"
    make_tfm "$1" swash-ot1 lf-swash-l1-ot1   "-L 40 -flnum -fpnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 osf-swash-l1-ot1  "-L 40 -fonum -fpnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 tlf-swash-l1-ot1  "-L 40 -flnum -ftnum $it_ot1_flags"
    make_tfm "$1" swash-ot1 tosf-swash-l1-ot1 "-L 40 -fonum -ftnum $it_ot1_flags"

    echo 'echo " done." >&2' >>maketfm.tmp
  fi
}

make_series() {

  for sub in "" Capt Disp Subh
  do
    if [ "x$1$sub" = "x" ]
    then
      make_metrics Regular
    else
      make_metrics "$1$sub"
    fi
  done

  make_spaced_metrics "$1Capt"

  if [ "x$1" = "x" ]
  then
    make_spaced_metrics Regular
  else
    make_spaced_metrics "$1"
  fi
}

make_additional_italic() {

  for sub in "" Capt Disp Subh
  do
    make_swash_metrics "$1$sub"
    make_integrals     "$1$sub"
  done

  make_spaced_swash_metrics "$1"
  make_spaced_swash_metrics "$1Capt"
}

# We first create shell scripts with the actual otftotfm calls.

echo "#!/bin/sh" >maketfm.tmp
echo "#!/bin/sh" >maketfm-expanded.tmp

for weight in Light "" Medium Semibold Bold Black
do
  for width in Cond SemiCn "" SemiExt
  do
    make_series             "$weight$width"
    make_series             "$weight${width}It"

    make_additional_italic  "$weight${width}It"
  done
done

# Then we execute and delete them.

. maketfm.tmp
#. maketfm-expanded.tmp
rm maketfm.tmp maketfm-expanded.tmp

