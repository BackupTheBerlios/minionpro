#!/bin/sh

font=$1

if [ "x$font" = "x" ]
then
  echo "No font specified!";
  echo "USAGE: maketfm <font>";
  exit 1
fi

## Detect whether the full set of optical sizes is present.
#opticals=1
#
#if [ ! -e "otf/$font-Capt.otf" ]
#then
#  opticals=0
#fi

make_tfm() {

  name="$1"
  enc="$2"
  spec="$3"
  shift 3

  echo -n " $spec," >&2
  otftotfm --no-dotlessj "$@" --clear-subs -fliga -fkern -e enc/mn-$enc.enc "otf/$font-$name.otf" "$font-$name-$spec"
}

get_flags() {
  case $1 in
      lf) flags="-flnum -fpnum";;
     osf) flags="-fonum -fpnum";;
     tlf) flags="-flnum -ftnum";;
    tosf) flags="-fonum -ftnum";;
  esac
}
get_ts_flags() {
  case $1 in
      lf) ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -fpnum --subs-filter=<Number> -fonum --subs-filter=!<Number> -flnum";;
     osf) ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -fpnum --subs-filter=<Number> -flnum --subs-filter=!<Number> -fonum";;
     tlf) ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -ftnum --subs-filter=<Number> -fonum --subs-filter=!<Number> -flnum";;
    tosf) ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -ftnum --subs-filter=<Number> -flnum --subs-filter=!<Number> -fonum";;
  esac
}
get_sc_flags() {
  case $1 in
      lf) sc_flags="-flnum -fpnum --subs-filter=<Letter> -fsmcp";;
     osf) sc_flags="-fonum -fpnum -fsmcp";;
     tlf) sc_flags="-flnum -ftnum --subs-filter=<Letter> -fsmcp";;
    tosf) sc_flags="-fonum -ftnum -fsmcp";;
  esac
}
get_sc_ts_flags() {
  case $1 in
      lf) sc_ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -fpnum --subs-filter=<Number> -fonum --subs-filter=!<Number> -flnum --subs-filter=<Letter> -fsmcp";;
     osf) sc_ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -fpnum -fsmcp --subs-filter=<Number> -flnum --subs-filter=!<Number> -fonum";;
     tlf) sc_ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -ftnum --subs-filter=<Number> -fonum --subs-filter=!<Number> -flnum --subs-filter=<Letter> -fsmcp";;
    tosf) sc_ts_flags="--include-subs=grave --include-subs=acute --include-subs=circumflex --include-subs=tilde --include-subs=dieresis --include-subs=hungarumlaut --include-subs=ring --include-subs=caron --include-subs=breve --include-subs=macron  --include-subs=dotaccent  --include-subs=cedilla  --include-subs=ogonek -fcase --clear-subs -ftnum -fsmcp --subs-filter=<Number> -flnum --subs-filter=!<Number> -fonum";;
  esac
}

make_normal_metrics() {

  get_flags $2
  get_ts_flags $2
  get_sc_flags $2
  get_sc_ts_flags $2

  make_tfm "$1" t1     $2-t1        $flags
  make_tfm "$1" ot1    $2-ot1       $flags
  make_tfm "$1" lgr    $2-lgr       -sgrek $flags
  make_tfm "$1" ly1    $2-ly1       $flags
  make_tfm "$1" t2a    $2-t2a       -scyrl $flags
  make_tfm "$1" t2b    $2-t2b       -scyrl $flags
  make_tfm "$1" t2c    $2-t2c       -scyrl $flags
  make_tfm "$1" x2     $2-x2        -scyrl $flags
  make_tfm "$1" ot2    $2-ot2       -scyrl $flags

  make_tfm "$1" ts1    $2-ts1       $ts_flags
  make_tfm "$1" ts1    $2-sc-ts1    $sc_ts_flags
  make_tfm "$1" ts1    $2-sc-l2-ts1 -L 80 $sc_ts_flags

  make_tfm "$1" t1     $2-sc-t1     --unicoding 'germandbls =: SSsmall' $sc_flags
  make_tfm "$1" ot1    $2-sc-ot1    --unicoding 'germandbls =: SSsmall' $sc_flags

  make_tfm "$1" t1     $2-sc-l2-t1  --unicoding 'germandbls =: SSsmall' -L 80 $sc_flags
  make_tfm "$1" ot1    $2-sc-l2-ot1 --unicoding 'germandbls =: SSsmall' -L 80 $sc_flags
}

make_oml_metrics() {

  make_tfm "$1" oml      $2-oml          --math-spacing --skew-char 255 $3
  make_tfm "$1" oml      $2-l1-oml       --math-spacing --skew-char 255 -L 40 $3
  make_tfm "$1" integral $2-cn1-integral -E 0.85 $3
  make_tfm "$1" integral $2-cn2-integral -E 0.75 -S 0.04 $3
}

make_spread_metrics() {

  get_flags $2
  get_ts_flags $2
  get_sc_flags $2
  get_sc_ts_flags $2

  make_tfm "$1" t1     $2-l1-t1     -L 40        $flags
  make_tfm "$1" ot1    $2-l1-ot1    -L 40        $flags
  make_tfm "$1" lgr    $2-l1-lgr    -L 40 -sgrek $flags
  make_tfm "$1" ly1    $2-l1-ly1    -L 40        $flags
  make_tfm "$1" t2a    $2-l1-t2a    -L 40 -scyrl $flags
  make_tfm "$1" t2b    $2-l1-t2b    -L 40 -scyrl $flags
  make_tfm "$1" t2c    $2-l1-t2c    -L 40 -scyrl $flags
  make_tfm "$1" x2     $2-l1-x2     -L 40 -scyrl $flags
  make_tfm "$1" ot2    $2-l1-ot2    -L 40 -scyrl $flags
  make_tfm "$1" ts1    $2-l1-ts1    -L 40        $ts_flags
  make_tfm "$1" ts1    $2-sc-l1-ts1 -L 40        $sc_ts_flags
  make_tfm "$1" t1     $2-sc-l1-t1  --unicoding 'germandbls =: SSsmall' -L 40 $sc_flags
  make_tfm "$1" ot1    $2-sc-l1-ot1 --unicoding 'germandbls =: SSsmall' -L 40 $sc_flags
}

make_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo -n "Processing font $font-$1 ..." >&2

    make_normal_metrics     "$1" lf   -flnum -fpnum
    make_normal_metrics     "$1" tlf  -flnum -ftnum
    make_normal_metrics     "$1" osf  -fonum -fpnum
    make_normal_metrics     "$1" tosf -fonum -ftnum

    make_oml_metrics        "$1" lf   -flnum -ftnum
    make_oml_metrics        "$1" tlf  -flnum -fpnum
    make_oml_metrics        "$1" osf  -fonum -ftnum
    make_oml_metrics        "$1" tosf -fonum -fpnum

    make_tfm "$1" orn-u orn-u

    echo " done." >&2
  fi
}

make_spaced_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo -n "Processing font $font-$1 ..." >&2

    make_spread_metrics     "$1" lf   -flnum -fpnum
    make_spread_metrics     "$1" tlf  -flnum -ftnum
    make_spread_metrics     "$1" osf  -fonum -fpnum
    make_spread_metrics     "$1" tosf -fonum -ftnum

    echo " done." >&2
  fi
}

make_swash_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo -n "Processing font $font-$1 ..." >&2

    make_tfm "$1" t1-swash  lf-swash-t1    -flnum -fpnum 
    make_tfm "$1" ot1-swash lf-swash-ot1   -flnum -fpnum 
    make_tfm "$1" t1-swash  osf-swash-t1   -fonum -fpnum 
    make_tfm "$1" ot1-swash osf-swash-ot1  -fonum -fpnum 
    make_tfm "$1" t1-swash  tlf-swash-t1   -flnum -ftnum 
    make_tfm "$1" ot1-swash tlf-swash-ot1  -flnum -ftnum 
    make_tfm "$1" t1-swash  tosf-swash-t1  -fonum -ftnum 
    make_tfm "$1" ot1-swash tosf-swash-ot1 -fonum -ftnum 

    echo " done." >&2
  fi
}

make_spaced_swash_metrics() {

  if [ -e "$font-$1.pfb" ]
  then
    echo -n "Processing font $font-$1 ..." >&2

    make_tfm "$1" t1-swash  lf-swash-l1-t1    -L 40 -flnum -fpnum 
    make_tfm "$1" ot1-swash lf-swash-l1-ot1   -L 40 -flnum -fpnum 
    make_tfm "$1" t1-swash  osf-swash-l1-t1   -L 40 -fonum -fpnum 
    make_tfm "$1" ot1-swash osf-swash-l1-ot1  -L 40 -fonum -fpnum
    make_tfm "$1" t1-swash  tlf-swash-l1-t1   -L 40 -flnum -ftnum 
    make_tfm "$1" ot1-swash tlf-swash-l1-ot1  -L 40 -flnum -ftnum
    make_tfm "$1" t1-swash  tosf-swash-l1-t1  -L 40 -fonum -ftnum 
    make_tfm "$1" ot1-swash tosf-swash-l1-ot1 -L 40 -fonum -ftnum 

    echo " done." >&2
  fi
}

make_series() {

  for sub in "" Capt Disp Subh
  do
    if [ "x$1$sub" = "x" ]
    then
      make_metrics Regular
    else
      make_metrics "$1$sub"
    fi
  done

  make_spaced_metrics "$1Capt"

  if [ "x$1" = "x" ]
  then 
    make_spaced_metrics Regular
  else
    make_spaced_metrics "$1"
  fi
}

make_additional_italic() {

  for sub in "" Capt Disp Subh
  do
    make_swash_metrics "$1$sub"
  done

  make_spaced_swash_metrics "$1"
  make_spaced_swash_metrics "$1Capt"
}

for series in "" Medium Semibold Bold
do
  make_series "$series"
  make_series "${series}It"

  make_additional_italic  "${series}It"
done

